<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2015/8/10
 * Time: 13:16
 */

namespace app\modules\common\models\uploadform;


use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

class Uploadform extends ActiveRecord{


    /*

    table_name      ok
    column_name     ok
    file_dir        ok
    file_type       ok
    file_desc       ok
    file_name
    column_value
    upload_id
    */

    public $filetype;
    public $img_src;

    public $file_name;
    public $file_ext;
    const SCENARIO_CREATE  = 'create';
    public $file;
    public $table;

    public function formName()
    {
        return 'UploadForm'; // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if($insert == true && is_null($this->column_value))
            $this->column_value = '';
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function rules()
    {
        return [

            [['file_type'] , 'required', 'on' => self::SCENARIO_CREATE,],
            [['file_name'], 'checkFileType', 'on' => self::SCENARIO_CREATE,],
            [['table_name'], 'required', 'on' => self::SCENARIO_CREATE],
            [['file_ext'], 'required', 'on' => self::SCENARIO_CREATE],
        ];
    }

    public function uploadFile($name, $fileDesc){

        $config = AbstractUpload::getUploadFormConfig($fileDesc);
        $this->setAttributes(ArrayHelper::toArray($config), false);

        if(!$this->_uploadFile($name, $config))
            return returnJson(0, '失败!'.array_values($this->getFirstErrors())[0] ,[], null, false);
        $this->setAttribute('file_name', $this->file_name);

        $data = $this->toArray();
        $data['file_name'] = $this->file_name;
        $data['img_src'] = $this->img_src;

        if ($this->validate() && $this->save()) {
            $data['upload_id'] = $this->upload_id;
            return returnJson(1, '成功!', $data, null, false);
        } else {
            $errors = $this->getFirstErrors();
            $errorInfo = array_shift($errors);
            return returnJson(0, '失败!'.$errorInfo ,[], null, false);
        }
    }

    /**
     * @param $name
     * @return null|string return null if file upload failed else return the new file name
     */
    private function _uploadFile($name, UploadformConfig $config){

        $file = UploadedFile::getInstance($this, $name);
        if(is_null($file)){
            $this->clearErrors();
            $this->addError("file_name","文件不能为空!");
            return false;
        }else{

            $fileTypeError = AbstractUpload::checkExtension($config->file_type, $file->getExtension());
            if(!is_null($fileTypeError)){
                $this->addError("file_name",$fileTypeError);
                return false;
            }
            if(!file_exists($config->file_dir))
                mkdir($config->file_dir);

            //save file
            $newname = time().$file->getExtension();
            if(!$file->saveAs($config->file_dir.'/'.$newname)){
                $this->addError("file_name","上传失败!");
                return false;
            }else{
                $this->file_name = $newname;
                $this->img_src = getImageHost().'/'.$config->file_dir.'/'.$this->file_name;
                return true;
            }
        }
    }

    public function edit($id, $upData)
    {
        $data = $this->findOne($id);
        foreach ($upData as $k=>$v) {
            $data->$k = $v;
        }

        return $data->save();
    }

    /**
     * 获取一条记录
     * @param $tableName AbstractUpload::TABLE_NAME_USER_INFO
     * @param $columnName
     * @param $columnValue
     * @return array|bool|null|ActiveRecord
     */
    public static function getItem($tableName, $columnName, $columnValue){

        if(is_null($tableName) || is_null($columnName) || is_null($columnValue)){
            return false;
        }else{
            return self::find()->where([
                'and',
                ['=','table_name', $tableName],
                ['=','column_name', $columnName],
                ['=','column_value', $columnValue]
            ])->one();
        }
    }


    public function checkFileType()
    {
        //扩展名
        $file_name = $this->file_name;

        $arr = explode('.', $file_name);
        $ext = array_pop($arr);

        //文件类型
        if ($this->isFileTypeOk('.'.$ext, $this->file_type)) {
            return true;
        }

        $this->addError('file_name', '文件不合法!');
        return false;
    }


    /**
     * 判断文件扩展名是否合法
     *
     * e.x: isFileType('jpg', 'image')
     * @param $ext
     * @param $fileType
     * @return bool
     */
    public function isFileTypeOk($ext, $fileType)
    {

        if(!$ext || is_null($fileType) )
            return false;

        $fileExtArray = $this->typeArray[$fileType];
        if ($fileExtArray && in_array($ext, $fileExtArray)) {
            return true;
        }
        return false;
    }

    public static function delOlddata($uploadId, $columnValue){

        $oneData = Uploadform::findOne($uploadId);
        if($oneData &&  $tableName = $oneData['table_name'] && $columnName = $oneData['column_name'] ){

            Uploadform::deleteAll(['table_name'=>$tableName, 'column_name'=>$columnName, 'column_value'=>$columnValue]);
        }
    }

    //更新column_value值
    public static function updateColumnValue($columnValue, $condition = ['in', 'upload_id', []])
    {
        $result = self::updateAll(['column_value'=>$columnValue], $condition);
        return $result;
    }

    //删除指定的记录
    public static function clearColumnValue($condition = [
            'and',
            ['=','column_value',0],
            ['=', 'table_name', 'table_name_value'],
            ['not in', 'upload_id', []]
        ]
    ){

        $result = self::updateAll(['column_value'=>0], $condition);
        return $result;
    }

    /**
     * 更新记录id并删除旧的值
     * @param $tableName
     * @param $columnValue
     * @param $uploadIds
     * @return bool
     */
    public static function updateAndClear($tableName, $columnValue, $uploadIds, $columnName = null){

        $upload = self::updateColumnValue($columnValue, ['in', 'upload_id', $uploadIds]);

        $clearCondition = [
            'and',
            ['=', 'column_value', $columnValue],
            ['=', 'table_name', $tableName],
            ['not in', 'upload_id', $uploadIds]
        ];
        if(!is_null($columnName))
            ArrayHelper::merge($clearCondition, ['column_name' => $columnName]);
        $clear = self::clearColumnValue($clearCondition);

        return $upload && $clear;
    }

    public static function getIdByFileName($fileName, $tableName){

        $uploadId = 0;
        $data = Uploadform::find()->where(['file_name'=>$fileName, 'table_name'=>$tableName])->select('upload_id')->one();
        if($data)
            $uploadId = $data['upload_id'];

        return $uploadId;
    }


    #region
    public static function getFile($tableName = AbstractUpload::TABLE_NAME_PRIZE_GOODS, $fileDesc = AbstractUpload::FILE_DESC_PRIZE_GOODS_IMAGE, $columnValue=0, $isList=true){

        $uploadForm = new Uploadform();
        $query = $uploadForm::find();
        $query->where([
            'table_name' => $tableName,
            'file_desc' => $fileDesc,
            'column_value' => $columnValue
        ]);

        if($isList)
            return $query->all();
        else
            return $query->one();

    }
    #endregion
}