<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2016/9/11
 * Time: 13:56
 */

namespace app\modules\common\models;


use app\modules\common\traits\TransactionTrait;
use app\modules\frontadmin\models\payment\Payment;
use app\modules\jike\models\BaseActiveRecord;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;

class PayOrder extends BaseActiveRecord
{

/*jike_pay_order | CREATE TABLE `jike_pay_order` (
`po_id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
`order_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '订单id',
`order_type` varchar(50) NOT NULL DEFAULT '' COMMENT '订 单所在表名',
`pay_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '支付方式',
`created_at` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
`updated_at` varchar(50) NOT NULL DEFAULT '0' COMMENT '更新时间',
`pay_status` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT '支付状态 0待支付,1已支付,2交易完成,3交易失败',
PRIMARY KEY (`po_id`)*/

    use TransactionTrait;


    #region 支付状态
    const CON_PAY_STATUS_NOT_PAYED = 0;  //未支付
    const CON_PAY_STATUS_PAY_SUCCESS = 1; //已支付
    const CON_PAY_STATUS_PAY_FINISH = 2; //支付完成
    const CON_PAY_STATUS_PAY_FAILED = 3; //支付失败
    #endregion

    #region order_type订单类型
    const CON_ORDER_TYPE_INT_RECHARGE = 1; //积分充值
    const CON_ORDER_TYPE_INT_CASH = 2; //积分提取
    const CON_ORDER_TYPE_BAIL_RECHARGE = 1; //保证金账户充值
    const CON_ORDER_TYPE_BAIL_CASH = 2; //保证金账户提取
    const CON_ORDER_TYPE_MARKTING_RECHARGE = 1; //营销账户充值
    const CON_ORDER_TYPE_MARKTING_CASH = 2; //营销账户提取
    #endregion


    public function behaviors()
    {
        $behaviors = parent::behaviors();
        return ArrayHelper::merge($behaviors, [
            [
                'class' => TimestampBehavior::className()
            ]
        ]);
    }


    public static function tableName()
    {
        return "{{%pay_order}}";
    }

    public function rules()
    {
        return [
            [
                [ 'order_id', 'order_type', 'pay_id','pay_status'], 'required', 'on'=> self::SCENARIO_CREATE
            ]
        ];
    }


    public function scenarios()
    {
        $scenrios = parent::scenarios();
        return ArrayHelper::merge($scenrios,[
            self::SCENARIO_CREATE => [
                'order_id', 'order_type', 'pay_id','pay_status','order_no'
            ]
        ]);
    }



    /**
     * 创建订单记录
     * @param $orderId  订单id_关联表主键
     * @param $orderType int 订单类型
     * @param $payId int 支付方式
     * @param $payStatus int 支付状态
     * @return bool
     */
    public function create($orderId, $orderType, $payId=Payment::CON_PAY_ID_ALIPAY, $payStatus=self::CON_PAY_STATUS_NOT_PAYED){

        $result = false;
        $this->scenario = self::SCENARIO_CREATE;
        $data = [
            self::formName()=>[
                'order_id' => $orderId,
                'order_type' => $orderType,
                'pay_id' => $payId,
                'order_no' => $this->_generatingOrderNo(),
                'pay_status' => $payStatus
            ]
        ];

        $this->beginTransaction();
        try{
            if($this->load($data) && $this->validate() && $result = $this->save()){
                $this->commit();
            }
        } catch (\Exception $e){
            $result = false;
            $this->message = $e->getMessage();
            $this->rollback();
        }
        return $result;
    }



    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if($insert){

        }
    }



    public function beforeSave($insert)
    {
        if($insert){
            if(self::findOne(['order_id'=>$this->order_id, 'pay_id'=>$this->pay_id])){
                $this->addError('order_id', '订单已经存在!');
                return false;
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function payOk( $orderId, $orderType, $payId, $payStatus, $tradeNo){

        $model = $this->findOne(['order_id'=>$orderId, 'order_type'=>$orderType]);
        $model->pay_id = $payId;
        $model->pay_status = $payStatus;
        $model->trade_no = $tradeNo;

        return $model->save();
    }


    #region 私有方法

    /**
     * 生成订单号
     * @return string
     */
    private function _generatingOrderNo(){

        //年月日时分秒毫秒   (后期再考虑加上用户id)
        $date = date('YmdHis');
        $microtime = microtime(1);
        list($sec, $msec) = explode('.', $microtime);
        $prev = str_repeat('0', 4-strlen($msec));
        return $date . '' . $prev  . $msec;
    }

    #endregion

}