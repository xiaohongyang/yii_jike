<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2016/5/17
 * Time: 15:55
 */

namespace app\modules\frontadmin\models\publicvideo;


use app\modules\frontadmin\models\Rl_user_ad_video_video;
use app\modules\frontadmin\models\video\video;

class PublicvideoCreate extends Publicvideo
{
    public $formVideo;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->on($this::EVENT_AFTER_INSERT, 'afterInsert');
        $this->on($this::EVENT_AFTER_UPDATE, 'afterUpdate');
    }

    public function rules()
    {
        return [
            [ 'pv_title', 'required' ],
            [ 'pv_introduce', 'required' ],
            [ 'pv_link', 'safe', 'on'=>$this::SCENARIO_UPDATE ],
        ];
    }

    public static function tableName()
    {
        $model = new Publicvideo();
        return $model->tableName();
    }

    public function attributeLabels()
    {
        return [
            'pv_title' => '视频名称',
            'pv_introduce' => '视频口号或标题',
            'pv_link' => '链接地址'
        ];
    }

    public function scenarios()
    {
        return [
            $this::SCENARIO_CREATE => [
                'pv_title', 'pv_introduce'
            ],
            $this::SCENARIO_UPDATE => [
                'pv_title', 'pv_introduce', 'pv_link'
            ]
        ];
    }

    /**
     * 添加公益视频
     * @param $data
     * @return bool
     * @throws \yii\db\Exception
     */
    public function create($data)
    {

        $transaction = \Yii::$app->db->beginTransaction();
        try {

            $this->setAttribute('user_id', self::getLoingUserId());

            if ($this->load($data) && $this->validate()) {

                if (empty($data['video']['video_id']) || empty($data['video']['video_unique'])) {
                    $this->addError('video', "视频不能为空!");
                    return false;
                } else {

                    $this->formVideo = new video();
                    $this->formVideo->scenario = video::SCENARIO_CREATE;
                    $this->formVideo->load($data);
                    $this->formVideo->scenario = video::SCENARIO_CREATE;
                    if (!$this->formVideo->validate()) {
                        $this->addError('formVideo', array_values($this->formVideo->getFirstErrors())[0]);
                        return false;
                    }
                }
                $rs = $this->save();
                $transaction->commit();
                return $rs;
            } else {
                return false;
            }
        } catch (\Exception $e) {
            $transaction->rollBack();
            return false;
        }
    }

    public function edit($data)
    {

        $this->scenario = $this::SCENARIO_UPDATE;
        $transaction = \Yii::$app->db->beginTransaction();
        $this->setIsNewRecord(false);
        try {

            $this->setAttribute('user_id', self::getLoingUserId());

            if ($this->load($data) && $this->validate()) {

                if (empty($data['video']['video_id']) || empty($data['video']['video_unique'])) {
                    $this->addError('video', "视频不能为空!");
                    return false;
                } else {

                    $this->formVideo = video::findOne(['video_id' => $data['video']['video_id']]);
                    $this->formVideo->scenario = video::SCENARIO_UPDATE;
                    $this->formVideo->load($data, 'video');
                    if (!$this->formVideo->validate()) {
                        $this->addError('formVideo', array_values($this->formVideo->getFirstErrors())[0]);
                        return false;
                    }
                }
                $rs = $this->save();

                $transaction->commit();
                return $rs;
            } else {
                return false;
            }
        } catch (\Exception $e) {
            $transaction->rollBack();
            return false;
        }
    }


    /**
     * 添加视频后置操作
     * @param $event
     */
    public function afterInseart($event)
    {
        //保存视频关联信息
        if ($this->formVideo->validate() && $this->formVideo->save()) {
            $this->link('video', $this->formVideo);
        }
    }

    public function afterUpdate($event){
        if( $this->scenario != $this::SCENARIO_UPDATE)
            return false;

        $sender = $event->sender;

        //1.取消原有的video关联,并删除云视频
        $videoOld = Rl_user_ad_video_video::findOne(['pv_id' => $sender->pv_id]);
        if(!is_null($videoOld)){
            $this->unlink('video', $videoOld, true);
            video::findOne(['v_id'=>$videoOld->v_id])->remove();
        }
        //2.保存视频关联信息
        if ($this->formVideo->validate() && $this->formVideo->save()) {
            $this->link('video', $this->formVideo);
        }
    }

}