<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2016/7/18
 * Time: 11:07
 */

namespace app\modules\frontadmin\models\love_video;


use app\modules\common\models\letv\Letv;
use app\modules\frontadmin\models\BaseActiveRecord;
use app\modules\frontadmin\models\rl_lovevideo_video\Rl_lovevideo_video;
use app\modules\frontadmin\models\video\video;

class Love_video extends BaseActiveRecord
{

/*| love_id    | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |
| love_title | varchar(120)        | NO   |     |         |                |
| love_name | varchar(120)        | NO   |     |         |                |
| admin_id   | int(10) unsigned    | NO   |     | 0       |                |
| link       | varchar(255)        | NO   |     |         |                |
| created_at | int(10) unsigned    | NO   |     | 0       |                |
| updated_at | int(10) unsigned    | NO   |     | 0       |                |
| deleted    | tinyint(3) unsigned | NO   |     | 0       |                |*/
    const C_DELETED_NO = 0;
    const C_DELETED_YES = 1;

    public $formVideo;


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->on($this::EVENT_AFTER_INSERT, [$this, 'afterInseart']);

        $this->on($this::EVENT_AFTER_UPDATE, [$this, 'afterUpdate']);

        $this->on($this::EVENT_BEFORE_UPDATE, [$this, 'beforeUpdate']);
    }

    public function rules()
    {
        return [
            [['love_title','love_name', 'admin_id'], 'required'],
            ['love_id', 'safe'],
            ['link', 'safe'],
            ['link', 'safe', 'on' => $this::SCENARIO_UPDATE],
        ];
    }

    public function scenarios()
    {
        return [
            $this::SCENARIO_DEFAULT =>[
                'love_name','love_title','admin_id', 'love_id', 'link'
            ],
            $this::SCENARIO_UPDATE =>[
                'love_name','love_title','admin_id', 'love_id', 'link'
            ],
            $this::SCENARIO_REMOVE => [
                [['love_id','deleted'],'required']
            ]
        ];
    }

    public function attributeLabels()
    {
        return [
            'love_name' => '广告名称',
            'love_title' => '广告口号或标题',
            'link' => '广告外链地址'
        ];
    }

    public function create($data=[])
    {
        /*if (is_array($data[$this->formName()]) && $data[$this->formName()]['love_id']) {
            $model = $this->findOne(['love_id' => $data[$this->formName()]['love_id']]);
            return $model->edit($data);
        }*/

        $this->beginTransaction();
        try {

            if(is_array($data) && !key_exists(self::formName(), $data))
                $data = [self::formName()=>$data];

            $this->setAttribute('admin_id', $this->getLoginAdminId());
            if ($this->load($data) && $this->validate()) {

                if (empty($data['video']['video_id']) || empty($data['video']['video_unique'])) {
                    $this->addError('video', "视频不能为空!");
                    return false;
                } else {

                    $this->formVideo = new video();
                    $this->formVideo->scenario = video::SCENARIO_CREATE;
                    $this->formVideo->load($data);
                    $this->formVideo->scenario = video::SCENARIO_CREATE;
                    if (!$this->formVideo->validate()) {
                        $this->addError('formVideo', array_values($this->formVideo->getFirstErrors())[0]);
                        return false;
                    }
                }
                $rs = $this->save();
                $this->commit();
                return $rs;
            } else {
                return false;
            }
        } catch (\Exception $e) {
            $this->rollback();
            $this->message = $e->getMessage();
            return false;
        }
    }

    public function edit($data)
    {

        $this->scenario = $this::SCENARIO_UPDATE;

        $this->beginTransaction();
        $this->setIsNewRecord(false);
        try {

            if(is_array($data) && !key_exists($this->formName(), $data))
                $data = [$this->formName()=>$data];

            $this->setAttribute('admin_id', self::getLoginAdminId());
            if ($this->load($data) && $this->validate()) {

                if (empty($data['video']['video_id']) || empty($data['video']['video_unique'])) {
                    $this->addError('video', "视频不能为空!");
                    return false;
                } else {

                    if(video::find()->where(['video_id' => $data['video']['video_id']])->count()>0){
                        $this->formVideo = video::findOne(['video_id' => $data['video']['video_id']]);
                        $this->formVideo->scenario = video::SCENARIO_UPDATE;
                    }else{
                        $this->formVideo = new video();
                        $this->formVideo->scenario = video::SCENARIO_CREATE;
                    }
                    $this->formVideo->load($data, 'video');
                    if (!$this->formVideo->validate()) {
                        $this->addError('formVideo', array_values($this->formVideo->getFirstErrors())[0]);
                        return false;
                    }
                }
                $rs = $this->save();

                $this->commit();
                return $rs;
            } else {
                return false;
            }
        } catch (\Exception $e) {
            $this->rollback();
            return false;
        }
    }

    public function afterInseart($event)
    {

        //保存视频关联信息
        if ($this->formVideo->validate() && $this->formVideo->save()) {

            $this->link('video', $this->formVideo);
        }
    }

    /**
     * 更新后置处理
     * @param $event
     */
    public function afterUpdate($event)
    {

        if( $this->scenario != $this::SCENARIO_UPDATE)
            return false;

        $sender = $event->sender;

        //2.取消原有的video关联,并删除云视频;  保存新的视频关联信息
        $videoOld = Rl_lovevideo_video::findOne(['love_id' => $sender->love_id]);
        if(!is_null($videoOld) && $videoOld->v_id != $this->formVideo->v_id){

            $this->unlink('video', $videoOld, true);
            video::findOne(['v_id'=>$videoOld->v_id])->remove();

            if ($this->formVideo->validate() && $this->formVideo->save()) {
                $this->link('video', $this->formVideo);
            }
        }else{
            if ($this->formVideo->validate() && $this->formVideo->save()) {
                $this->link('video', $this->formVideo);
            }
        }

    }

    public function beforeUpdate($event)
    {

        $sender = $event->sender;
        $video = self::findOne(['love_id' => $sender->love_id]);
        //1.判断是否有修改视频的权限
        if (!$video || $video->admin_id != $this->getLoginAdminId()) {
            throw new Exception('这不是你的视频,禁止非法修改!');
        }
    }

    public function remove(){

        $this->beginTransaction();
        try{
            //物理删除
            self::deleteAll(['love_id'=>$this->love_id]);

            //逻辑删除
            /*$dataModel = self::findOne(['love_id'=>$this->love_id]);
            $dataModel->deleted = $this::C_DELETED_YES;
            $dataModel->save();*/

            //删除云视频
            $video_id = $this->video->video_id;
            $letv = new Letv();
            $letv->video_del($video_id);

            //删除视频关联信息
            $this->unlink('video', $this->video, true);
            //删除视频表中记录
            video::findOne(['video_id'=>$video_id])->remove();

            $this->commit();
            return true;
        }catch(Exception $e){
            $this->message = "出现异常,请稍后再试!或联系管理员!";
            $this->rollback();
            return false;
        }
    }

    /**
     * 视频信息
     * @return $this
     */
    public function getVideo(){
        return $this->hasOne(video::className(),['v_id'=>'v_id'])->via('rl_love_video_video');
    }

    /**
     * 视频文件关联表
     * @return \yii\db\ActiveQuery
     */
    public function getRl_love_video_video(){
        return $this->hasOne(Rl_lovevideo_video::className(),['love_id'=> 'love_id']);
    }
}