<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2016/2/28
 * Time: 14:58
 */

namespace app\modules\jike\models;


use app\ext\org\area\AreaTools;
use app\modules\jike\models\user\User_info;
use yii\captcha\Captcha;
use yii\captcha\CaptchaValidator;
use yii\helpers\ArrayHelper;
use yii\web\Cookie;

class UserLogin extends User
{

    const SCENARIO_LOGIN = 'login';
    const EVENT_AFTER_LOGIN = 'event_after_login';
    const EVENT_LOGIN_FAIL = 'event_login_fail';

    public $captcha;
    public $remember_user;

    ////////////////////////////////////////////// Event Begin //////////////////////////////////////////////
    /**
     * 登录后处理 1.记录session
     *
     * @param $event
     */
    public function afterLogin($event)
    {
        $user =  $event->sender;

        $identity = $this->findIdentity($user->getAttribute('user_id'));
        \Yii::$app->jike_user->login($identity);

        //将用户当前的城市id保存到用户信息表
        $userInfo = User_info::findOne(['user_id'=>$user->user_id]);
        $userInfo->city_id = AreaTools::getCurrentCityId();
        $userInfo->save();

        $this->clearLoginFailTimes();
    }

    /**
     * 登录失败后事件
     * @param $event
     */
    public function loginFail($event){

        $times = \Yii::$app->session->get('login_fail_times')?:0;
        $times += 1;
        \Yii::$app->session->set("login_fail_times",$times,false);
    }

    ////////////////////////////////////////////// Event End //////////////////////////////////////////////

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->on(self::EVENT_AFTER_LOGIN, [$this,'afterLogin']);
        $this->on(self::EVENT_LOGIN_FAIL, [$this, 'loginFail']);
    }

    /**
     * return tableName
     * @return string
     */
    public static function tableName()
    {
        $user = new User();
        return $user->formName();
    }

    public function rules(){
        $rules = [
            [['user_mobile','user_password'],'required'],
            ['user_mobile','match','pattern'=>'#^1[0-9]{10}$#','message'=>'手机号不合法'],
            ['user_password','string','length'=>[6,20],'message'=>'密码必须为6-20位长度的字符串'],
            ['captcha','captcha'],
        ];

        if($this->isShowCaptcha()){
            $rules[] = [
              'captcha','required','message'=>'请输入验证码'
            ];
        }

        return $rules;
    }

    public function scenarios()
    {
        return [
            self::SCENARIO_LOGIN => ['user_mobile','user_password','remember_user','captcha']
        ];
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge( parent::attributeLabels(),[
            'remember_user' => '记住账号'
        ]) ; // TODO: Change the autogenerated stub
    }

    public function captcha(){

        $captchaValidator = new  CaptchaValidator();
        $captchaValidator->captchaAction = '/jike/public/captchaLogin';
        if(!$captchaValidator->validate($this->captcha)){
            $this->addError('captcha', '验证码错误!');
        }

    }

    /**
     * return input's placeholder value
     * @return array
     */
    public function getPlaceholder(){
        return [
            'captcha' => '输入验证码',
            'user_mobile' => '已注册手机号',
            'user_password' => '登录密码',
        ];
    }

    /**
     * 用户登录
     * @param $data
     * @return bool
     */
    public function login($data){
        $this->setScenario('login');
        if ($this->load($data) && $this->validate()) {
            if (($user = static::findOne(['user_mobile'=>$this->user_mobile])) !== null) {
                if ($user->validatePassword($this->user_password)) {

                    $user->trigger(self::EVENT_AFTER_LOGIN);
                    if($this->remember_user == '1')
                        $this->setUserCookie($user);
//                    else
//                        $this->clearUserCookies();
                    return true;
                } else {

                    $this->addError('user_password', '用户或密码错误!');
                    $this->trigger(self::EVENT_LOGIN_FAIL);
                }
            } else {
                $this->addError('user_password', '账户不存在!');
                $this->trigger(self::EVENT_LOGIN_FAIL);
            }
        }

        return false;
    }

    //用户cookie
    private function setUserCookie($user){

        setcookie('cookie_auth_key', $user->auth_key, time()+3600 );
        setcookie('cookie_user_mobile', $user->user_mobile, time()+3600 );
        setcookie('cookie_user_password', base64_encode(urlencode($this->user_password)), time()+3600 );
    }
    public function getUserCookies(){

        if( !empty($_COOKIE['cookie_auth_key'])){
            return [
                'cookie_auth_key' => $_COOKIE['cookie_auth_key'],
                'cookie_user_mobile' => $_COOKIE['cookie_user_mobile'],
                'cookie_user_password' => urldecode(base64_decode($_COOKIE['cookie_user_password'])),
            ];
        }else{
            return false;
        }
    }
    public function clearUserCookies(){

        setcookie('cookie_auth_key',NULL);
        unset ($_COOKIE['cookie_auth_key']);
        setcookie('cookie_user_mobile',NULL);
        unset ($_COOKIE['cookie_user_mobile']);
        setcookie('cookie_user_password',NULL);
        unset ($_COOKIE['cookie_user_password']);
    }

    //用户验证码
    public function isShowCaptcha(){
        return \Yii::$app->session->get('login_fail_times') >= 3;
    }
    private function clearLoginFailTimes(){
        \Yii::$app->session->remove('login_fail_times');
    }
    public function getLoginFailTimes(){
        return \Yii::$app->session->get('login_fail_times');
    }
}