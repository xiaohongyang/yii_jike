<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2016/2/22
 * Time: 21:15
 */

namespace app\modules\jike\models;


use app\ext\common\helpers\MobileMsgAliHelpers;
use app\ext\common\helpers\MobileMsgHelpers;
use app\ext\org\area\AreaTools;
use app\modules\frontadmin\models\user_account\User_account;
use app\modules\jike\models\user\User_info;
use yii\base\Exception;
use yii\captcha\CaptchaValidator;
use yii\helpers\ArrayHelper;

class UserFindPassword extends User
{
    const SCENARIO_REGISTER = 'findPassword';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->on($this::EVENT_AFTER_INSERT, [$this, 'afterInseart']);
    }


    /**
     * return tableName
     * @return string
     */
    public static function tableName()
    {
        $user = new User();
        return $user->formName();
    }

    public $captcha;
    public $password;
    public $repeat_password;
    public $mobile_check_code;

    /**
     * return input's placeholder value
     * @return array
     */
    public function getPlaceholder(){
        return [
            'captcha' => '验证码',
            'user_mobile' => '已注册手机号',
            'mobile_check_code' => '手机验证',
            'user_password' => '设置新密码',
        ];
    }


    /**
     * return form rules
     * @return array
     */
    public function rules()
    {
        $rules = parent::rules();
        return ArrayHelper::merge($rules, [
            [['user_mobile','captcha','mobile_check_code','user_password',],'required','on' => self::SCENARIO_REGISTER],
            ['user_mobile', 'string', 'length'=>[11,11], 'message'=>'手机号位数不正确'],
            ['user_mobile', 'match', 'pattern' => '#^1[0-9]{10}$#', 'message'=>'手机号不合法'],
            ['user_mobile','exist', 'targetClass'=>User::className(),'targetAttribute' => ['user_mobile'=>'user_mobile'],'message'=>'手机号不存在!'],
            ['user_password','string','length'=>[6,20],'message'=>'密码必须为6-20位长度的字符串'],
            ['captcha', 'captcha',  'on'=>self::SCENARIO_REGISTER],
            ['mobile_check_code', 'checkMobileCode'],
        ]);
    }

    public function scenarios()
    {
        return [
            self::SCENARIO_REGISTER =>[ 'user_mobile', 'user_password', 'captcha', 'mobile_check_code'],
            self::SCENARIO_DEFAULT => [
                 'user_mobile'
            ]
        ];
    }

    /**
     * column attributeLabels
     * @return array
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(
            parent::attributeLabels(),
            [
                'captcha' => '验证码',
                'user_mobile' => '已注册手机号',
                'mobile_check_code' => '手机验证',
                'user_password' => '设置新密码',

            ]
        );
    }

    /**
     * validate captcha method
     */
    public function captcha(){

        $captcha = $this->captcha;
        $captchValidator = new CaptchaValidator();
        $captchValidator->captchaAction = '/jike/public/captcha';

        if (!$captchValidator->validate($captcha)) {
            $this->addError('captcha', '验证码错误!');
        }
    }

    /**
     *  validate mobile code
     */
    public function checkMobileCode(){

        if($this->getMobilecode($this->user_mobile) != $this->mobile_check_code ){
            $this->addError('mobile_check_code', "手机验证码不正确!");
        }
    }


    /**
     * register user
     * @param $params
     * @return bool
     */
    public function changePassword($params){
        $this->load($params);
        if( $this->validate() ){
            $trasaction = \Yii::$app->db->beginTransaction();
            try{
                //添加用户
                $user = $this->findOne(['user_mobile'=>$this->user_mobile]);
                $user->user_password = $this->user_password;
                $rs = $user->save(false);
                $trasaction->commit();
                return $rs;
            }catch(Exception $e){
                $trasaction->rollBack();
                return false;
            }
        } else{
            return false;
        }
    }

    public function getMobileCheckcode($mobile){

        $error = $this->_getMobileCheckcodeHandle($mobile);
        if($error !== true)
            return $error;
        else{
            //生成验证码
            $checkCode = $this->_setMobilecode($mobile);

            //发送验证码，并返回到前端
//            $msg = "【集客】您于".date("Y年m月d日",time())."您正在进行找回密码，验证码为{$checkCode}";
//            $rs =  MobileMsgHelpers::getInstance()->sendMsg([$mobile], $msg) ;
            $rs = MobileMsgAliHelpers::getInstance()->sendMsg([$mobile], MobileMsgAliHelpers::TEMPLATE_FIND_PWD_CHECK_CODE, ['code'=>$checkCode, 'product'=>'集客']);
            return $rs ? $rs : "验证码发送失败!";
        }
    }


    /**
     * 设置并返回手机验证码
     * @param $mobile
     * @return int
     */
    private function _setMobilecode($mobile){

        $checkCode = rand(10000,99999);
        $key = 'mobile_find_password_check_code_'.$mobile;
        \Yii::$app->session->set($key, $checkCode);
        return $checkCode;
    }

    /**
     * 获取指定手机验证码
     * @param $mobile
     * @return mixed
     */
    public function getMobilecode($mobile){

        $key = 'mobile_find_password_check_code_'.$mobile;
        return \Yii::$app->session->get($key);
    }

    /**
     * 获取手机验证码前数据验证
     * @param $mobile
     * @return bool|string
     */
    private function _getMobileCheckcodeHandle($mobile){

        if(! \Yii::$app->request->isGet)

            return "非法请求!";
        else {

            //1.判断手机号是否正确
            if(empty($mobile))
                return "手机号码不能为空!";
            $mobile = trim($mobile);
            if(strlen($mobile) != 11 || !preg_match("#1[\d]{10}#", $mobile))
                return "非法手机号码";
            //2.判断手机号是否已经存在
            if(! User::findOne(['user_mobile'=>$mobile]) )
                return "手机号不存在!";
            else
                return true;
        }

    }


    public function afterInseart($event){

    }

}